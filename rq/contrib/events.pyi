# -*- coding: utf-8 -*-
#
# Copyright 2020 NVIDIA Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
from datetime import datetime
from threading import Thread

from redis.client import PubSub, Redis
from rq.contrib.utils.future import TypedFuture as TypedFuture
from rq.job import Job as Job, JobStatus as JobStatus
from typing import Any, ContextManager, Iterable, Optional, Union, NamedTuple, Type, List, Tuple, Set

from rq.serializers import DefaultSerializer


class JobEvent(NamedTuple):
    id: str
    status: str
    date: datetime


class JobEventQueue(ContextManager):
    connection: Redis = ...
    job_id: str = ...
    _name: str = ...
    _pubsub: Any = ...
    _requested_stop: bool = ...
    _waiters: List[Tuple[TypedFuture[JobEvent], Optional[Set[JobStatus]]]] = ...
    _poll_frequency: float = ...
    _wait_thread: Optional[Thread] = ...
    _serializer: Union[Type, Type[DefaultSerializer]] = ...
    def __init__(self, job: Union[Job, str], poll_frequency: float = ..., queue_prefix: str = ..., serializer: Optional[Type] = None) -> Any: ...
    @property
    def name(self) -> str: ...
    def send(self, event: JobEvent) -> Any: ...
    def _receive_once(self, job: Job, pubsub: PubSub, old_status: Optional[str]) -> Optional[JobEvent]: ...
    def _wait(self) -> None: ...
    @property
    def started(self) -> bool: ...
    def start_receiving(self) -> None: ...
    def stop_receiving(self, wait_timeout: Optional[float] = ...) -> bool: ...
    @property
    def receiving(self) -> bool: ...
    def receive(self, *, only: Iterable[str] = ...) -> TypedFuture[JobEvent]: ...
    def wait(self) -> TypedFuture[JobEvent]: ...
    def __enter__(self) -> JobEventQueue: ...
    def __exit__(self, exc_type: Any, exc_val: Any, exc_tb: Any) -> None: ...
