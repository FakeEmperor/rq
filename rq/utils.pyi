# -*- coding: utf-8 -*-
#
# Copyright 2020 NVIDIA Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
import datetime
import logging
from .compat import as_text as as_text, is_python_version as is_python_version, string_types as string_types
from .exceptions import TimeoutFormatError as TimeoutFormatError
from typing import Any, Optional, Callable, Iterable, Union


class _Colorizer:
    codes: Any = ...
    notty: Any = ...
    def __init__(self) -> None: ...
    def reset_color(self): ...
    def colorize(self, color_key: Any, text: Any): ...

colorizer: _Colorizer

def make_colorizer(color: str) -> Callable[[str], str]: ...

class ColorizingStreamHandler(logging.StreamHandler):
    levels: Any = ...
    exclude: Any = ...
    def __init__(self, exclude: Optional[Any] = ..., *args: Any, **kwargs: Any) -> None: ...
    @property
    def is_tty(self) -> bool: ...
    def format(self, record: Any): ...

def import_attribute(name: Any): ...
def utcnow(): ...

_TIMESTAMP_FORMAT: str

def utcformat(dt: datetime.datetime): ...
def utcparse(string: str): ...
def first(iterable: Iterable, default: Optional[Any] = ..., key: Optional[Any] = ...): ...
def is_nonstring_iterable(obj: Any): ...
def ensure_list(obj: Any): ...
def current_timestamp(): ...
def enum(name: str, *sequential: Any, **named: Any): ...
def backend_class(holder: Any, default_name: Any, override: Optional[Any] = ...): ...
def str_to_date(date_str: str): ...
def parse_timeout(timeout: Union[str, float, None]): ...
